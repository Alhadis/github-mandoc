#!/usr/bin/env ruby
# frozen_string_literal: true

require "optparse"
begin
	require "github/mandoc"
rescue LoadError
	require_relative "../lib/github/mandoc"
end

load_method = $stdin.isatty ? :topic : :stdin
filter_only = false
preview     = false
results     = nil

OptionParser.new do |opts|
	opts.banner = "Usage: #{$PROGRAM_NAME} [-Ffp] [section] subject"
	opts.on("-F", "--filter-only", "Apply filters only; do not execute mandoc(1)") do
		filter_only = true
	end
	opts.on("-f", "--file", "Treat subject as a file specification instead of a topic") do
		load_method = ARGV[0] == "-" ? :stdin : :file
	end
	opts.on("-p", "--preview", "Replicate the look-and-feel of a rendered page on GitHub.com") do
		preview = true
	end
end.parse!

# Apply HTML filters to input as though it were emitted by mandoc(1)
if filter_only
	filename = ARGF.filename.sub(/^-$/, "<standard input>")
	input = ARGF.readlines.join
	results = GitHub::Mandoc.filter input, filename

# Collect the output of `mandoc -Thtml -Ofragment`
else
	# Resolve the source of the man(7) or mdoc(7) markup
	case load_method
	when :stdin
		results = GitHub::Mandoc.render $stdin, "<standard input>"
	when :file
		results = GitHub::Mandoc.render_file ARGV[0]
	else
		topic, section = ARGV.reverse
		if topic.nil?
			warn "fatal: no topic specified"
			exit 1
		end
		results = GitHub::Mandoc.render_topic topic, section
	end
end

# Decorate output to look like it's on GitHub
if preview
	dir = File.expand_path("../test/template", __dir__)
	puts File.read("#{dir}/header.html")
	puts results
	puts File.read("#{dir}/footer.html")

# Just the frag, ma'am
else
	puts results
end
